return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
ggplot(data = sim.results, mapping = aes(x = n)) +
geom_line(aes(y = variance, color = "variance")) +
geom_line(aes(y = bias, color = "bias")) +
geom_line(aes(y = mse, color = "mse")) +
theme_minimal()
library(ggplot2)
set.seed(123L)
sim.estimator <- function(n, size = 10, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 10, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
ggplot(data = sim.results, mapping = aes(x = n)) +
geom_line(aes(y = variance, color = "variance")) +
geom_line(aes(y = bias, color = "bias")) +
geom_line(aes(y = mse, color = "mse")) +
theme_minimal()
library(ggplot2)
set.seed(123L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 100, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
ggplot(data = sim.results, mapping = aes(x = n)) +
geom_line(aes(y = variance, color = "variance")) +
geom_line(aes(y = bias, color = "bias")) +
geom_line(aes(y = mse, color = "mse")) +
theme_minimal()
library(ggplot2)
set.seed(123L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 1000, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
ggplot(data = sim.results, mapping = aes(x = n)) +
geom_line(aes(y = variance, color = "variance")) +
geom_line(aes(y = bias, color = "bias")) +
geom_line(aes(y = mse, color = "mse")) +
theme_minimal()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
set.seed(123L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 1000, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
ggplot(data = sim.results, mapping = aes(x = n)) +
geom_line(aes(y = variance, color = "variance")) +
geom_line(aes(y = bias, color = "bias")) +
geom_line(aes(y = mse, color = "mse")) +
theme_minimal()
head
head(sim.results)
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "Statistic", values_to = "Value")
991*4
View(sim.results_long)
991*3
View(sim.results_long)
View(sim.results)
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic, scales = "free_y") +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic) +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
head(sim.results_long)
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "statistic", values_to = "value")
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "statistic", values_to = "value")
head(sim.results_long)
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic) +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic, scales = "free_y") +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
8/9
library(tidyverse)
set.seed(1L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 1000, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "statistic", values_to = "value")
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic, scales = "free_y") +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
library(tidyverse)
# Stat3 Sheet 3 exercise 3.3
# function simulating n random samples of size = 1000 form a normal distribution with dist.mean = 0 and dist.variance = 2
# calculate estimator for each sample
set.seed(123L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 1000, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
# plotting against n in [10, 1000]
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "statistic", values_to = "value")
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic, scales = "free_y") +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
library(tidyverse)
# Stat3 Sheet 3 exercise 3.3
# function simulating n random samples of size = 1000 form a normal distribution with dist.mean = 0 and dist.variance = 2
# calculate estimator for each sample
set.seed(123L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 1000, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
# plotting against n in [10, 1000]
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]])
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "statistic", values_to = "value")
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic, scales = "free_y") +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
library(tidyverse)
# Stat3 Sheet 3 exercise 3.3
# function simulating n random samples of size = 1000 form a normal distribution with dist.mean = 0 and dist.variance = 2
# calculate estimator for each sample
set.seed(123L)
sim.estimator <- function(n, size = 1000, dist.mean = 0, dist.variance = 2) {
estimates <- numeric()
a <- (2 / n)
b <- (n - 2) / (n * (n - 1))
for (i in seq_len(size)) {
rand.sample <- rnorm(n = n, mean = dist.mean, sd = sqrt(dist.variance))
estimates[[i]] <- a * (rand.sample[[1]] ^ 2) + b * sum(rand.sample[2:n] ^ 2)
}
return(estimates)
}
stats.estimator <- function(n, size = 1000, ..., dist.variance = 2) {
est.variance <- numeric()
est.bias <- numeric()
est.mse <- numeric()
estimates <- sim.estimator(n = n, size = 1000, ..., dist.variance = dist.variance)
est.variance <- sum((estimates - mean(estimates)) ^ 2) / (size - 1)
est.bias <- mean(estimates) - dist.variance
est.mse <- est.variance + est.bias ^ 2
return(list("Empirical_Variance" = est.variance, "Empirical_Bias" = est.bias, "Empirical_MSE" = est.mse))
}
# plotting against n in [10, 1000]
n.values <- seq(10, 1000)
est.var <- numeric()
est.bias <- numeric()
est.mse <- numeric()
for (i in seq_along(n.values)) {
stats <- stats.estimator(n = n.values[[i]], size = 100)
est.var[[i]] <- stats$Empirical_Variance
est.bias[[i]] <- stats$Empirical_Bias
est.mse[[i]] <- stats$Empirical_MSE
}
sim.results <- data.frame(n = n.values, variance = est.var, bias = est.bias, mse = est.mse)
sim.results_long <- sim.results %>%
pivot_longer(cols = c(variance, bias, mse), names_to = "statistic", values_to = "value")
# Plot
ggplot(sim.results_long, aes(x = n, y = value)) +
geom_line() +
facet_wrap(~ statistic, scales = "free_y") +  # Create separate panels for each statistic
labs(title = "Variance, Bias, and MSE vs. Sample Size (n)",
x = "Sample Size (n)", y = "Value") +
theme_minimal()
c(1,2,3)
x <- c(1,2,3)
y <- (1,2,4)
y <- c(1,2,4)
x && y
(x && y)
(x && y) == 1
(x & y) == 1
(x && y) == c(1,2,3)
q()
print({"hello"}
{"/n"}
print({"hello"},
{"/n"},
{"world"})
a <- print({"hello"},
{"/n"},
{"world"})
library(credentials)
credential_helper_get()
library(usethi)
library(usethis)
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
source("~/Library/Mobile Documents/com~apple~CloudDocs/LMU/WS24:25/Progr/git_repos/08/R/04_exercise_fractal.R", echo=TRUE)
ex01FractalReference(30, 300)
rm(list = ls())
std.error
n1 <- 208
x1.bar <- 72
n2 <- 429
x2.bar <- 70.5
emp.var <- 90.25
(x1.bar - x2.bar) / sqrt(emp.var * ((1 / n1) + (1 / n2)))
qnorm(0.95)
emp.std <- sqrt(emp.var)
std.error <- emp.std * sqrt(1 / n1 + 1 / n2)
alpha <- 0.1
c <- qnorm(1 - alpha / 2)
# construct confidence interval boundaries:
lower <- (x1.bar - x2.bar) - c * std.error
upper <- (x1.bar - x2.bar) + c * std.error
delta_0 <- 2
z <- qnorm(0.95)
q <- z - 2 / std.error
beta <- pnorm(q)
std.error
emp.var
std.diff <- delta_0 / std.error
std.diff
`r sprintf("%.3f", standardized_difference)`
`r sprintf("%.3f", std.diff)`
std.diff <- delta_0 / std.error
sprintf("%.3f", std.diff)
pnorm(z - std.diff)
q <- z - 2 / std.error
beta <- pnorm(q)
beta
```{r}
delta_0 <- 1
std.diff <- delta_0 / std.error
delta_0 <- 1
std.diff <- delta_0 / std.error
```{r}
```{r}
delta_0 <- 1
std.diff <- delta_0 / std.error
delta_0 <- 1
std.diff <- delta_0 / std.error
```{r}
z <- qnorm(0.95)
beta <- pnorm(z - std.diff)
```{r}
source("~/projects/DataFest2025/source_all.R", echo=TRUE)
# import grid and municipality data
municipal.data <- fread(paste0(path, "/data/raw/municipal_data/municipal_main.csv"))
grid.data <- fread(paste0(path, "/data/raw/grid_data/100m_grid.csv"))
# cross sectional data
cs.hk.2023 <- fread(paste0(path, "/data/raw/HiDrive/cross_section/CampusFile_HK_2023.csv"))
cs.wk.2023 <- fread(paste0(path, "/data/raw/HiDrive/cross_section/CampusFile_WK_2023.csv"))
cs.wm.2023 <- fread(paste0(path, "/data/raw/HiDrive/cross_section/CampusFile_WM_2023.csv"))
# panel data
panel.hk <- fread(paste0(path, "/data/raw/HiDrive/panel/CampusFile_HK_cities.csv"))
panel.wk <- fread(paste0(path, "/data/raw/HiDrive/panel/CampusFile_WK_cities.csv"))
panel.wm <- fread(paste0(path, "/data/raw/HiDrive/panel/CampusFile_WM_cities.csv"))
# description data
cs.summary <- read_xlsx(paste0(path, "/data/raw/HiDrive/cross_section/number_municipalities_cross.xlsx"))
panel.summary <- read_xlsx(paste0(path, "/data/raw/HiDrive/panel/number_observations_panel.xlsx"))
# grid data remove column "vac_2022" ~ 90% NAs
grid.data[, vac_2022 := NULL]
plot(grid.data$x_map, grid.data$y_map, pch = ".")
grid.sf <- st_as_sf(grid.data, coords = c("x_map", "y_map"), crs = 3035)
ggplot() +
geom_sf(data = grid.sf, aes(color = pop_20), size = 0.3) +
scale_color_viridis_c(option = "D", na.value = "transparent") +
labs(title = "Grid cells colored by 2020 population",
color = "Population 2020") +
theme_minimal()
grid_sample <- sample(grid.sf, 100000)
nrow(grid.sf)
grid_sample <- grid.sf[sample(seq_along(grid.sf), 100000), ]
nrow(grid.sf)
grid_sample <- grid.sf[sample(nrow(grid.sf), 100000), ]
ggplot() +
geom_sf(data = grid_sample, aes(color = pop_20), size = 0.3) +
scale_color_viridis_c(option = "D", na.value = "transparent") +
labs(title = "Grid cells colored by 2020 population",
color = "Population 2020") +
theme_minimal()
grid_polygons <- st_buffer(grid_sample, dist = 50)
library(tmap)
tmap_mode("view")  # or "plot" for static
tm_shape(grid_polygons) +
tm_fill(col = "pop_20", palette = "viridis", style = "quantile", border.col = NA) +
tm_layout(title = "Population per 100m Grid Cell")
